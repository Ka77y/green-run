# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "release/*" ]

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: green-run-env

    steps:
    - name: ðŸšš Get latest code
      uses: actions/checkout@v2
    - name: Use Node.js 14
      uses: actions/setup-node@v2
      with:
        node-version: "14"
    - name: clean cache ðŸ”¨
      run: npm cache clean --force
    - name: npm install ðŸ”¨
      run: npm install
    - name: build ðŸ”¨
      env:
        CI: false
      run: npm run build
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: get from s3 ðŸ”¨
      run: |
        aws s3 cp s3://build-pipeline-resources/greenrunkey.pem greenrunkey.pem
        aws s3 cp s3://build-pipeline-resources/env .env
        ls
    - name: build to EC2
      run: |
        chmod 400 greenrunkey.pem
        scp -o StrictHostKeyChecking=no -i greenrunkey.pem -r dist ec2-user@ec2-44-195-220-173.compute-1.amazonaws.com:~
        ls
        scp -o StrictHostKeyChecking=no -i greenrunkey.pem -r .env ec2-user@ec2-44-195-220-173.compute-1.amazonaws.com:~/dist/
    - name: Deploy
      run: |
        chmod 400 greenrunkey.pem
        ssh -o StrictHostKeyChecking=no -i greenrunkey.pem ec2-user@ec2-44-195-220-173.compute-1.amazonaws.com "cd dist && npm i && ls -a && npm run deploy > server.log 2>&1 &" & 


